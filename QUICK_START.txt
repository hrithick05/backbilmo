═══════════════════════════════════════════════════════════════
  QUICK START GUIDE
═══════════════════════════════════════════════════════════════

✅ YOUR SYSTEM IS WORKING PERFECTLY!

Both caching AND scraping are operational.

═══════════════════════════════════════════════════════════════
  CURRENT STATUS
═══════════════════════════════════════════════════════════════

✅ API: ONLINE (port 5000)
✅ MongoDB: CONNECTED
✅ Cache-First: WORKING (0.09s)
✅ Amazon Scraping: WORKING (43s)
✅ Data: COMPLETE (prices, images, links, ratings)

═══════════════════════════════════════════════════════════════
  CACHED DATA SAMPLE
═══════════════════════════════════════════════════════════════

amazon:laptop (20 products):
  1. HP 15 - ₹48,990 - 3.7★
  2. Dell Vostro - ₹34,990 - 3.5★
  3. ASUS Vivobook 15 - ₹41,990 - 3.9★
  ... and 17 more products

All with images and buy links!

═══════════════════════════════════════════════════════════════
  WANT FRESH AMAZON DATA?
═══════════════════════════════════════════════════════════════

Option 1: Clear cache for one search
  python manage_cache.py clear amazon laptop

Option 2: Clear all cache
  python manage_cache.py clearall

Option 3: Search something new (not in cache)
  Try: "gaming laptop", "macbook", etc.

═══════════════════════════════════════════════════════════════
  USEFUL COMMANDS
═══════════════════════════════════════════════════════════════

View all cached data:
  python manage_cache.py show

Inspect specific cache:
  python manage_cache.py inspect amazon laptop

Check system status:
  python show_status.py

═══════════════════════════════════════════════════════════════
  RUNNING THE APP
═══════════════════════════════════════════════════════════════

Backend (if not running):
  python app.py

Frontend:
  Open index.html in your browser

═══════════════════════════════════════════════════════════════
  UNDERSTANDING THE FLOW
═══════════════════════════════════════════════════════════════

When you search:
  1. API checks MongoDB first
  2. If found → Return instantly (0.1s) ✅
  3. If not found → Scrape Amazon (40s) → Save to MongoDB
  4. Next search for same term → Instant from cache!

This is EXACTLY how it should work! 🎉

═══════════════════════════════════════════════════════════════


